---
title: "MRI cleaning for OCD"
author: "MochiBear.Hei"
date: "12.16.2024"
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    page-layout: full
    html-math-method: katex
editor: source
---

```{css, echo = F}
body{
  font-family: Helvetica;
  font-size: 16pt;
  max-width: 1000px;
  margin: auto;
  margin-left:310px;
}
pre{
  font-size: 14px;
}
/* Headers */
h1{
    font-size: 24pt;
  }
h1,h2{
    font-size: 20pt;
  }
h3,h4,h5,h6{
  font-size: 18pt;
}
#TOC {
  position: fixed;
  left: 0;
  top: 0;
  width: 300px;
  height: 100%;
  overflow:auto;
}
```


```{r setup,suppressPackageStartupMessages= TRUE}
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)

# Data manipulation
library(dplyr)
library(tidyr)

# Plotting
library(ggplot2)

# Utilities
library(knitr)
```

# Desikan atlas
```{r}
desikan_ct <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_thk_dsk.csv")
#print(summary(mri_ct))
desikan_v <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_vol_dsk.csv")
#print(summary(mri_v))

unique(desikan_ct$eventname)
unique(desikan_v$eventname)

#how many?
#cortical thickness
unique_count_ct <- length(unique(desikan_ct$src_subject_id))
cat("Number of unique src_subject_id in mri_ct:", unique_count_ct, "\n")

count_per_event_ct <- table(desikan_ct$eventname)
print(count_per_event_ct)

#volume
unique_count_v <- length(unique(desikan_v$src_subject_id))
cat("Number of unique src_subject_id in mri_v:", unique_count_v, "\n")

count_per_event_v <- table(desikan_v$eventname)
print(count_per_event_v)
```

## Cortical thickness
Remove rows with over 30% missing data across symptoms_diagnosis
```{r}
# Calculate the proportion of missing data for each row across the symptoms_diagnosis columns
# Specify the columns to exclude from the missing calculation
excluded_columns <- c("eventname", "src_subject_id")

# Calculate the proportion of missing values excluding eventname and src_subject_id, then filter rows accordingly
desikan_ct <- desikan_ct %>%
  rowwise() %>%
  mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
  ungroup() %>%
  filter(missing_prop < 0.30) %>%  # Keep rows with less than 30% missing values
  select(-missing_prop)  # Remove the temporary missing_prop column

# Print the filtered data
print(desikan_ct)
# Get the number of unique src_subject_id
unique_count <- length(unique(desikan_ct$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")

```

Keep only one time point
```{r}
desikan_ct <- desikan_ct %>%
  filter(eventname == "2_year_follow_up_y_arm_1")
```

Keep only necessary variables
```{r}
desikan_ct <- desikan_ct %>%
  select(-eventname)
```

### Save as csv
```{r}
write.csv(desikan_ct, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/ocd/desikan_ct.csv", row.names = FALSE)
```

## Volume
Remove rows with over 30% missing data across symptoms_diagnosis
```{r}
# Calculate the proportion of missing data for each row across the symptoms_diagnosis columns
# Specify the columns to exclude from the missing calculation
excluded_columns <- c("eventname", "src_subject_id")

# Calculate the proportion of missing values excluding eventname and src_subject_id, then filter rows accordingly
desikan_v <- desikan_v %>%
  rowwise() %>%
  mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
  ungroup() %>%
  filter(missing_prop < 0.30) %>%  # Keep rows with less than 30% missing values
  select(-missing_prop)  # Remove the temporary missing_prop column

# Print the filtered data
print(desikan_v)
# Get the number of unique src_subject_id
unique_count <- length(unique(desikan_v$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
```

Keep only one time point
```{r}
desikan_v <- desikan_v %>%
  filter(eventname == "2_year_follow_up_y_arm_1")
```

Keep only necessary variables
```{r}
desikan_v <- desikan_v %>%
  select(-eventname)
```

### Save as csv
```{r}
write.csv(desikan_v, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/ocd/desikan_v.csv", row.names = FALSE)
```

# Destrieux Atlas

```{r}
destrieux_ct <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_thk_dst.csv")
#print(summary(mri_ct))
destrieux_v <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_vol_dst.csv")
#print(summary(mri_v))

unique(destrieux_ct$eventname)
unique(destrieux_v$eventname)

#how many?
#cortical thickness
unique_count_ct <- length(unique(destrieux_ct$src_subject_id))
cat("Number of unique src_subject_id in mri_ct:", unique_count_ct, "\n")

count_per_event_ct <- table(destrieux_ct$eventname)
print(count_per_event_ct)

#volume
unique_count_v <- length(unique(destrieux_v$src_subject_id))
cat("Number of unique src_subject_id in mri_v:", unique_count_v, "\n")

count_per_event_v <- table(destrieux_v$eventname)
print(count_per_event_v)
```


## Cortical thickness
Remove rows with over 30% missing data across symptoms_diagnosis
```{r}
# Calculate the proportion of missing data for each row across the symptoms_diagnosis columns
# Specify the columns to exclude from the missing calculation
excluded_columns <- c("eventname", "src_subject_id")

# Calculate the proportion of missing values excluding eventname and src_subject_id, then filter rows accordingly
destrieux_ct <- destrieux_ct %>%
  rowwise() %>%
  mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
  ungroup() %>%
  filter(missing_prop < 0.30) %>%  # Keep rows with less than 30% missing values
  select(-missing_prop)  # Remove the temporary missing_prop column

# Print the filtered data
print(destrieux_ct)
# Get the number of unique src_subject_id
unique_count <- length(unique(destrieux_ct$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")

```

Keep only one time point
```{r}
destrieux_ct <- destrieux_ct %>%
  filter(eventname == "2_year_follow_up_y_arm_1")
```

Keep only necessary variables
```{r}
destrieux_ct <- destrieux_ct %>%
  select(-eventname)
```

### Save as csv
```{r}
write.csv(destrieux_ct, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/ocd/destrieux_ct.csv", row.names = FALSE)
```


## Volume
Remove rows with over 30% missing data across symptoms_diagnosis
```{r}
# Calculate the proportion of missing data for each row across the symptoms_diagnosis columns
# Specify the columns to exclude from the missing calculation
excluded_columns <- c("eventname", "src_subject_id")

# Calculate the proportion of missing values excluding eventname and src_subject_id, then filter rows accordingly
destrieux_v <- destrieux_v %>%
  rowwise() %>%
  mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
  ungroup() %>%
  filter(missing_prop < 0.30) %>%  # Keep rows with less than 30% missing values
  select(-missing_prop)  # Remove the temporary missing_prop column

# Print the filtered data
print(destrieux_v)
# Get the number of unique src_subject_id
unique_count <- length(unique(destrieux_v$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
```

Keep only one time point
```{r}
destrieux_v <- destrieux_v %>%
  filter(eventname == "2_year_follow_up_y_arm_1")
```

Keep only necessary variables
```{r}
destrieux_v <- destrieux_v %>%
  select(-eventname)
```

### Save as csv
```{r}
write.csv(destrieux_v, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/ocd/destrieux_v.csv", row.names = FALSE)
```
