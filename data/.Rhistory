# evaluate
conf_matrix_thresh <- confusionMatrix(y_pred_calib_thresh, y_true_calib)
print(conf_matrix_thresh)
dtest <- xgb.DMatrix(data = x_test, label = y_test)
# predict soft probabilities
pred_probs_test <- predict(final_model, dtest, reshape = TRUE)
colnames(pred_probs_test) <- as.character(class_labels)
thresholded_preds_test <- sapply(class_labels, function(cls) {
probs <- pred_probs_test[, as.character(cls)]
as.integer(probs >= best_thresholds[as.character(cls)])
})
pred_classes_test <- apply(thresholded_preds_test, 1, function(row) {
if (sum(row) == 0) {
return(NA)  # no threshold met
} else if (sum(row) == 1) {
return(which(row == 1) - 1)
} else {
return(which.max(pred_probs_test[row == 1, ][1, ]) - 1)
}
})
na_indices <- is.na(pred_classes_test)
if (any(na_indices)) {
fallback_preds <- max.col(pred_probs_test[na_indices, ]) - 1
pred_classes_test[na_indices] <- fallback_preds
}
y_true_test <- factor(y_test, levels = class_labels)
y_pred_test <- factor(pred_classes_test, levels = class_labels)
conf_matrix_test <- confusionMatrix(y_pred_test, y_true_test)
print(conf_matrix_test)
df_plot <- as.data.frame(pred_probs_test)
colnames(df_plot) <- as.character(class_labels)
df_plot$true_label <- y_test
# long format
df_long <- df_plot %>%
pivot_longer(cols = -true_label, names_to = "class", values_to = "prob") %>%
mutate(class = factor(class, levels = class_labels),
is_true_class = as.integer(as.character(true_label) == as.character(class)))
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
plots <- lapply(class_labels, function(cls) {
df_cls <- df_long %>% filter(class == cls)
cls_label <- class_names[as.character(cls)]
# Histogram
hist_plot <- ggplot(df_cls, aes(x = prob, fill = factor(is_true_class))) +
geom_histogram(position = "identity", alpha = 0.8, bins = 30, color = "black") +
scale_fill_manual(
values = c("0" = "red", "1" = "#800080"),
name = "",
labels = c("Rest", paste("Class:", cls_label))
) +
labs(
x = paste0("P(x = ", cls_label, ")"),
y = "Count",
title = cls_label
) +
theme_classic(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "top"
)
# ROC
roc_obj <- roc(df_cls$is_true_class, df_cls$prob, quiet = TRUE)
roc_df <- data.frame(
FPR = 1 - roc_obj$specificities,
TPR = roc_obj$sensitivities
)
roc_plot <- ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "blue", size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "darkgreen") +
labs(
x = "False Positive Rate",
y = "True Positive Rate",
title = "ROC Curve OvR"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5)
)
# Combine histogram + ROC
hist_plot / roc_plot
})
final_plot <- wrap_plots(plots, nrow = 1)
print(final_plot)
ggsave("bpm_i_OvR_ROC.png", final_plot, width = 12, height = 6, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#800080") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#BA55D3") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#BA55D3") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#9966CC") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#DDA0DD") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#BA55D3") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
conf_mat_table <- table(y_true_test, y_pred_test)
conf_df <- as.data.frame(conf_mat_table)
colnames(conf_df) <- c("True", "Predicted", "Count")
class_names <- c("0" = "Healthy", "1" = "Borderline", "2" = "Clinical")
conf_df$True <- factor(conf_df$True, levels = names(class_names), labels = class_names)
conf_df$Predicted <- factor(conf_df$Predicted, levels = names(class_names), labels = class_names)
ggplot(conf_df, aes(x = Predicted, y = True, fill = Count)) +
geom_tile(color = "white") +
geom_text(aes(label = Count), size = 5) +
scale_fill_gradient(low = "white", high = "#9966CC") +
labs(
title = "Confusion Matrix (Test Set)",
x = "Predicted Class",
y = "True Class",
fill = "Count"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 13)
)
ggsave("confusion_matrix_heatmap.png", width = 6, height = 5, dpi = 300)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Modeling
library(caret)     # used for train/test split setup and model support
library(xgboost)   # main model used
# Utilities
library(knitr)     # for reporting chunks
library(ggplot2)
library(viridis)  # For consistent color palette
##list of people to include from flow script
subids <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/subids.csv") %>%
select(src_subject_id, ksads_11_917_p) %>% #categorical diagnosis of ocd from ksads , 0 = no ocd current or present diagnosis
mutate(ksads_11_917_p = as.factor(ksads_11_917_p)) # Convert to factor
mri <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/mri.csv") %>%
select (-smri_vol_scs_lesionlh, -smri_vol_scs_lesionrh, -smri_vol_scs_intracranialv) #have 4897 NA each + colinear
full_dat <- inner_join(subids, mri, by = "src_subject_id")
cbcl <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/core/mental-health/mh_p_cbcl.csv") %>%
filter(eventname == "2_year_follow_up_y_arm_1") %>%
select(src_subject_id,cbcl_scr_syn_external_t) %>%
distinct(src_subject_id, .keep_all = TRUE) %>%
mutate(
# bin the raw t scores by clinical cutoffs
cbcl_externalizing = cut(
cbcl_scr_syn_external_t,
breaks = c(-Inf, 65, 70, Inf),
labels = c("normal", "borderline", "clinical"),
right = FALSE
),
# convert the factors to numeric class labels: normal = 0, borderline = 1, clinical = 2
cbcl_externalizing = as.numeric(cbcl_externalizing) - 1
) %>%
select(src_subject_id, cbcl_externalizing)
# merge
full_dat <- inner_join(full_dat, cbcl, by = "src_subject_id")
na_counts <- colSums(is.na(full_dat))
na_counts[na_counts > 0]  # print only columns with NA values
# mean imputation:
full_dat <- full_dat %>%
mutate(across(c(mrisdp_508, mrisdp_527, mrisdp_567, mrisdp_582, mrisdp_601, mrisdp_602, mrisdp_603, mrisdp_604),
~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
library(caret)
set.seed(123)
# Create stratified split indices for cbcl_externalizing
train_index <- createDataPartition(full_dat$cbcl_externalizing, p = 0.7, list = FALSE)
train_data <- full_dat[train_index, ]
remaining_data <- full_dat[-train_index, ]
# Now split the remaining 30% (test + calib) equally (15/15) with stratification again
test_index <- createDataPartition(remaining_data$cbcl_externalizing, p = 0.5, list = FALSE)
calib_data <- remaining_data[-test_index, ]
test_data <- remaining_data[test_index, ]
################# check
table(table(full_dat$cbcl_externalizing))
table(table(train_data$cbcl_externalizing))
table(table(calib_data$cbcl_externalizing))
table(table(test_data$cbcl_externalizing))
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
#models
library(caret)
library(xgboost)
# Plotting
library(ggplot2)
library(viridis)
# Utilities
library(knitr)
##list of people to include in analysis subids.csv
subids <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/subids.csv")
mri <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/mri.csv") %>%
select (-smri_vol_scs_lesionlh, -smri_vol_scs_lesionrh, -smri_vol_scs_intracranialv) #removed these columns because they have 4897 NA each; should i remove , mrisdp_604 total cortical volume?
full_dat <- mri[mri$src_subject_id %in% subids$src_subject_id, ]
bpm <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/core/mental-health/mh_y_bpm.csv") %>%
filter(eventname == "2_year_follow_up_y_arm_1") %>%
select(src_subject_id, bpm_y_scr_external_t) %>%
distinct(src_subject_id, .keep_all = TRUE)  #remove duplicates
# merge
full_dat <- inner_join(full_dat, bpm, by = "src_subject_id")
cbcl <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_p_cbcl.csv") %>%
filter(eventname == "2_year_follow_up_y_arm_1") %>%
select(src_subject_id, cbcl_scr_syn_external_t) %>%
distinct(src_subject_id, .keep_all = TRUE)
# merge
full_dat <- inner_join(full_dat, cbcl, by = "src_subject_id")
na_counts <- colSums(is.na(full_dat))
na_counts[na_counts > 0]  # print only columns with NA values
# mean imputation:
full_dat <- full_dat %>%
mutate(across(c(mrisdp_508, mrisdp_527, mrisdp_567, mrisdp_582, mrisdp_601, mrisdp_602, mrisdp_603, mrisdp_604),
~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
set.seed(123)
# Split the data into training and test sets (70/30)
n <- nrow(full_dat)
train_indices <- sample(1:n, size = round(0.7 * n))
train_data <- full_dat[train_indices, ]  #4559 of 200
test_data <- full_dat[-train_indices, ] #1954 of 200
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# Add 'set' column to each
train_data <- train_data %>% mutate(set = "Train")
test_data  <- test_data  %>% mutate(set = "Test")
# Combine
combined_data <- bind_rows(train_data, test_data)
# Reshape to long format
long_split <- combined_data %>%
select(set, cbcl_scr_syn_external_t, bpm_y_scr_external_t) %>%
pivot_longer(cols = -set, names_to = "variable", values_to = "value") %>%
mutate(variable = recode(variable,
"cbcl_scr_syn_external_t" = "Parent-Reported",
"bpm_y_scr_external_t"    = "Youth-Reported"
))
# Function to calculate density and get max y-value
calculate_density_and_max <- function(data) {
dens <- density(data$value, na.rm = TRUE)
return(max(dens$y))
}
# Calculate global max density across all variable + set combinations
max_density <- long_split %>%
group_by(variable, set) %>%
summarise(max_density = calculate_density_and_max(cur_data()), .groups = "drop") %>%
summarise(global_max = max(max_density)) %>%
pull(global_max)
# Final Plot
ggplot(long_split, aes(x = value, fill = set)) +
geom_histogram(aes(y = ..density..), bins = 30, color = "black", alpha = 0.3, position = "identity") +
geom_density(alpha = 0.4, size = 1) +
facet_wrap(~ variable, scales = "fixed") +
scale_fill_manual(values = c("Train" = "#377eb8", "Test" = "#e41a1c")) +
coord_cartesian(xlim = c(-2, 5), ylim = c(0, max_density)) +
labs(title = "Train vs Test Distributions of Outcome Variables",
x = "Standardized Scores",
y = "Density",
fill = "Dataset") +
theme_classic(base_size = 18) +
theme(
legend.position = "top",
strip.text = element_text(face = "bold", size = 11),
strip.background = element_blank(),  # <<-- removes grey boxes
plot.title = element_text(face = "bold", hjust = 0.5)
)
# Reshape data to long format
long_dat <- full_dat %>%
select( bpm_y_scr_external_t, cbcl_scr_syn_external_t) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
mutate(variable = recode(variable,
"bpm_y_scr_external_t"    = "Youth-Reported",
"cbcl_scr_syn_external_t" = "Parent-Reported"
))
# Function to calculate density and get max y-value
calculate_density_and_max <- function(data) {
dens <- density(data$value, na.rm = TRUE)
return(max(dens$y))
}
# Calculate global max density for fixed y-axis
max_density <- long_dat %>%
group_by(variable) %>%
summarise(max_density = calculate_density_and_max(cur_data())) %>%
summarise(global_max = max(max_density)) %>%
pull(global_max)
p <- ggplot(long_dat, aes(x = value, fill = variable)) +
geom_histogram(aes(y = ..density..), bins = 30, color = "black", alpha = 0.3) +
geom_density(alpha = 0.6) +
facet_wrap(~ variable, scales = "fixed") +
labs(
title = "Distribution of externalizing Symptom Scores",
x = "T-Score",
y = "Density"
) +
scale_fill_manual(values = c("#2E8B57", "#800080")) +
theme_classic(base_size = 14) +
theme(
legend.position = "none",
strip.text = element_text(face = "bold")
)
p
#ggsave("t_score_distribution.pdf", plot = p, width = 8, height = 5)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
#models
library(caret)
library(xgboost)
# Plotting
library(ggplot2)
library(viridis)
# Utilities
library(knitr)
##list of people to include in analysis subids.csv
subids <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/subids.csv")
mri <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/mri.csv") %>%
select (-smri_vol_scs_lesionlh, -smri_vol_scs_lesionrh, -smri_vol_scs_intracranialv) #removed these columns because they have 4897 NA each; should i remove , mrisdp_604 total cortical volume?
full_dat <- mri[mri$src_subject_id %in% subids$src_subject_id, ]
bpm <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/core/mental-health/mh_y_bpm.csv") %>%
filter(eventname == "2_year_follow_up_y_arm_1") %>%
select(src_subject_id, bpm_y_scr_external_t) %>%
distinct(src_subject_id, .keep_all = TRUE)  #remove duplicates
# merge
full_dat <- inner_join(full_dat, bpm, by = "src_subject_id")
cbcl <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_p_cbcl.csv") %>%
filter(eventname == "2_year_follow_up_y_arm_1") %>%
select(src_subject_id, cbcl_scr_syn_external_t) %>%
distinct(src_subject_id, .keep_all = TRUE)
# merge
full_dat <- inner_join(full_dat, cbcl, by = "src_subject_id")
na_counts <- colSums(is.na(full_dat))
na_counts[na_counts > 0]  # print only columns with NA values
# mean imputation:
full_dat <- full_dat %>%
~ ifelse(is.na(.), mean(., na.rm = TRUE), .))
full_dat <- full_dat %>%
mutate(across(
c(mrisdp_508, mrisdp_527, mrisdp_582, mrisdp_601, mrisdp_602, mrisdp_603, mrisdp_604),
~ ifelse(is.na(.), mean(., na.rm = TRUE), .)
)) %>%
filter(!is.na(bpm_y_scr_external_t))
# Reshape data to long format
long_dat <- full_dat %>%
select( bpm_y_scr_external_t, cbcl_scr_syn_external_t) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
mutate(variable = recode(variable,
"bpm_y_scr_external_t"    = "Youth-Reported",
"cbcl_scr_syn_external_t" = "Parent-Reported"
))
# Function to calculate density and get max y-value
calculate_density_and_max <- function(data) {
dens <- density(data$value, na.rm = TRUE)
return(max(dens$y))
}
# Calculate global max density for fixed y-axis
max_density <- long_dat %>%
group_by(variable) %>%
summarise(max_density = calculate_density_and_max(cur_data())) %>%
summarise(global_max = max(max_density)) %>%
pull(global_max)
p <- ggplot(long_dat, aes(x = value, fill = variable)) +
geom_histogram(aes(y = ..density..), bins = 30, color = "black", alpha = 0.3) +
geom_density(alpha = 0.6) +
facet_wrap(~ variable, scales = "fixed") +
labs(
title = "Distribution of externalizing Symptom Scores",
x = "T-Score",
y = "Density"
) +
scale_fill_manual(values = c("#2E8B57", "#800080")) +
theme_classic(base_size = 14) +
theme(
legend.position = "none",
strip.text = element_text(face = "bold")
)
p
#ggsave("t_score_distribution.pdf", plot = p, width = 8, height = 5)
