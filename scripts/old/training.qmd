---
---
title: "Predict four symptom domains"
author: "MochiBear.Hei"
date: "04.13.2025"
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    page-layout: full
    html-math-method: katex
editor: source
---

```{css, echo = F}
body{
  font-family: Helvetica;
  font-size: 16pt;
  max-width: 1000px;
  margin: auto;
  margin-left:310px;
}
pre{
  font-size: 14px;
}
/* Headers */
h1{
    font-size: 24pt;
  }
h1,h2{
    font-size: 20pt;
  }
h3,h4,h5,h6{
  font-size: 18pt;
}
#TOC {
  position: fixed;
  left: 0;
  top: 0;
  width: 300px;
  height: 100%;
  overflow:auto;
}
```

```{r setup,suppressPackageStartupMessages= TRUE}
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)

# Data manipulation
library(dplyr)
library(tidyr)
library(ROSE)
#models
library(caret)
library(xgboost)

# Plotting
library(ggplot2)
library(viridis) 
library(GGally)
library(caret)
library(pROC)
library(MLmetrics)
library(dplyr)

library(DMwR2)
# Utilities
library(knitr)

# Calculate Log-Loss
library(Metrics)

```

# Load
## ID list
```{r}
##list of people to include from flow script
subids <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/subids.csv") %>%
  select(src_subject_id, ksads_11_917_p) %>% #categorical diagnosis of ocd from ksads , 0 = no ocd current or present diagnosis
  mutate(ksads_11_917_p = as.factor(ksads_11_917_p)) # Convert to factor

```

## MRI
```{r}
mri <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/ocd/mri.csv") %>%
  select (-smri_vol_scs_lesionlh, -smri_vol_scs_lesionrh, -smri_vol_scs_intracranialv) #have 4897 NA each + colinear  

full_dat <- inner_join(subids, mri, by = "src_subject_id")
```

## BPM
```{r}
bpm <- read.csv("/Users/maggieheimvik/Desktop/GitHub/masters_thesis/Data/core/mental-health/mh_y_bpm.csv") %>%
  filter(eventname == "2_year_follow_up_y_arm_1") %>%
  select(src_subject_id, bpm_y_scr_internal_t, bpm_y_scr_external_t) %>%
  distinct(src_subject_id, .keep_all = TRUE) %>%
  mutate(
    # bin the raw t scores by clinical cutoffs
    bpm_internalizing = cut(
      bpm_y_scr_internal_t,
      breaks = c(-Inf, 65, 70, Inf),
      labels = c("normal", "borderline", "clinical"),
      right = FALSE
    ),
    bpm_externalizing = cut(
      bpm_y_scr_external_t,
      breaks = c(-Inf, 65, 70, Inf),
      labels = c("normal", "borderline", "clinical"),
      right = FALSE
    ),
    # convert the factors to numeric class labels: normal = 0, borderline = 1, clinical = 2
    bpm_internalizing = as.numeric(bpm_internalizing) - 1,
    bpm_externalizing = as.numeric(bpm_externalizing) - 1
  ) %>%
  select(src_subject_id, bpm_internalizing, bpm_externalizing)

# merge
full_dat <- inner_join(full_dat, bpm, by = "src_subject_id")
```
## CBCL
```{r}
cbcl <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_p_cbcl.csv") %>%
  filter(eventname == "2_year_follow_up_y_arm_1") %>%
  select(src_subject_id,cbcl_scr_syn_internal_t, cbcl_scr_syn_external_t) %>%
  distinct(src_subject_id, .keep_all = TRUE) %>%
  mutate(
    # bin the raw t scores by clinical cutoffs
    cbcl_internalizing = cut(
      cbcl_scr_syn_internal_t,
      breaks = c(-Inf, 65, 70, Inf),
      labels = c("normal", "borderline", "clinical"),
      right = FALSE
    ),
    cbcl_externalizing = cut(
      cbcl_scr_syn_external_t,
      breaks = c(-Inf, 65, 70, Inf),
      labels = c("normal", "borderline", "clinical"),
      right = FALSE
    ),
    # convert the factors to numeric class labels: normal = 0, borderline = 1, clinical = 2
    cbcl_internalizing = as.numeric(cbcl_internalizing) - 1,
    cbcl_externalizing = as.numeric(cbcl_externalizing) - 1
  ) %>%
  select(src_subject_id, cbcl_internalizing, cbcl_externalizing)

# merge
full_dat <- inner_join(full_dat, cbcl, by = "src_subject_id")
```

# Handle NA
```{r}
na_counts <- colSums(is.na(full_dat))
na_counts[na_counts > 0]  # print only columns with NA values


# mean imputation: 
full_dat <- full_dat %>%
  mutate(across(c(mrisdp_508, mrisdp_527, mrisdp_567, mrisdp_582, mrisdp_601, mrisdp_602, mrisdp_603, mrisdp_604),
                ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))

```

# Split data
```{r}
set.seed(123)  

# Split the data (80/20)
n <- nrow(full_dat)
train_indices <- sample(1:n, size = round(0.8 * n))

# Prepare labels
train_data <- full_dat[train_indices, ]
test_data  <- full_dat[-train_indices, ]

```

#create model matrix 
```{r}
combined_data <- full_dat %>%
  select(-src_subject_id, -ksads_11_917_p, -bpm_externalizing, -cbcl_externalizing, -cbcl_internalizing)

x_all <- model.matrix(bpm_internalizing ~ ., combined_data)[, -1]
x_train <- x_all[train_indices, ]
x_test  <- x_all[-train_indices, ]


```

```{r}
library(tictoc)  # for timing

# Parameter grid
param_grid <- expand.grid(
  nrounds = c(50, 100),
  max_depth = c(2, 7),
  min_child_weight = c(1, 2),
  eta = c(0.05, 0.1),
  gamma = c(0.1, 1),
  subsample = c(0.6, 0.8),
  colsample_bytree = c(0.6, 0.8)
)

all_results <- list()
strategies <- c("baseline", "weights", "smote", "smote_weights")

for (strategy in strategies) {
  cat("\n\n==============================\n")
  cat("🔁 STRATEGY:", toupper(strategy), "\n")
  cat("==============================\n")
  
  tic(paste("Timing:", strategy))  # Start timer
  
  best_logloss <- Inf
  best_model <- NULL
  best_params <- NULL
  best_nrounds <- NULL
  
  # Preprocess based on strategy
  if (grepl("smote", strategy)) {
    cat("📊 Applying SMOTE...\n")
    smote_data <- as.data.frame(x_train)
    smote_data$bpm_internalizing <- as.factor(train_data$bpm_internalizing)
    smote_result <- SMOTE(bpm_internalizing ~ ., data = smote_data, perc.over = 300, perc.under = 200)
    x_train_proc <- smote_result %>% select(-bpm_internalizing) %>% as.matrix()
    y_train_proc <- as.numeric(smote_result$bpm_internalizing)
  } else {
    x_train_proc <- x_train
    y_train_proc <- train_data$bpm_internalizing
  }
  
  # Weights
  if (grepl("weights", strategy)) {
    class_counts <- table(y_train_proc)
    total <- sum(class_counts)
    class_weights <- total / (length(class_counts) * class_counts)
    weights <- class_weights[as.character(y_train_proc)]
    dtrain <- xgb.DMatrix(data = x_train_proc, label = y_train_proc, weight = weights)
  } else {
    dtrain <- xgb.DMatrix(data = x_train_proc, label = y_train_proc)
  }

  dtest <- xgb.DMatrix(data = x_test, label = test_data$bpm_internalizing)

  # Grid search
  for (i in 1:nrow(param_grid)) {
    cat(sprintf("⚙️  Grid [%02d/%02d] | eta: %.2f, max_depth: %d, nrounds: %d\n", 
                i, nrow(param_grid), 
                param_grid$eta[i], 
                param_grid$max_depth[i], 
                param_grid$nrounds[i]))

    params <- list(
      booster = "gbtree",
      objective = "multi:softprob",
      eval_metric = "mlogloss",
      num_class = 3,
      max_depth = param_grid$max_depth[i],
      min_child_weight = param_grid$min_child_weight[i],
      eta = param_grid$eta[i],
      gamma = param_grid$gamma[i],
      subsample = param_grid$subsample[i],
      colsample_bytree = param_grid$colsample_bytree[i],
      nthread = 1
    )

    try({
      cv <- xgb.cv(
        params = params,
        data = dtrain,
        nfold = 5,
        nrounds = param_grid$nrounds[i],
        early_stopping_rounds = 10,
        verbose = 0
      )

      mean_logloss <- min(cv$evaluation_log$test_mlogloss_mean)

      cat(sprintf("   🔍 Logloss: %.5f %s\n", mean_logloss, 
                  ifelse(mean_logloss < best_logloss, "✅ BEST", "")))

      if (mean_logloss < best_logloss) {
        best_logloss <- mean_logloss
        best_params <- params
        best_nrounds <- param_grid$nrounds[i]
      }
    }, silent = TRUE)
  }

  # Train final model
  cat("🚀 Training final model with best parameters...\n")
  model <- xgb.train(
    params = best_params,
    data = dtrain,
    nrounds = best_nrounds,
    verbose = 0
  )

  # Predict and evaluate
  cat("📈 Evaluating final model...\n")
  pred_probs <- predict(model, dtest)
  pred_matrix <- matrix(pred_probs, nrow = nrow(test_data), byrow = TRUE)
  pred_classes <- max.col(pred_matrix) - 1
  
  cm <- confusionMatrix(as.factor(pred_classes), as.factor(test_data$bpm_internalizing))
  recall <- cm$byClass[,"Recall"]
  f1 <- cm$byClass[,"F1"]
  bal_acc <- cm$byClass[,"Balanced Accuracy"]

  result_df <- tibble(
    Strategy = strategy,
    Class = c("Normal", "Borderline", "Clinical"),
    Recall = round(recall, 3),
    F1 = round(f1, 3),
    Balanced_Accuracy = round(bal_acc, 3)
  ) %>%
    bind_rows(tibble(
      Strategy = strategy,
      Class = "Macro Avg",
      Recall = round(mean(recall, na.rm = TRUE), 3),
      F1 = round(mean(f1, na.rm = TRUE), 3),
      Balanced_Accuracy = round(mean(bal_acc, na.rm = TRUE), 3)
    ))

  all_results[[strategy]] <- result_df

  toc(log = TRUE)  # Stop timer
  cat("✅ Completed:", strategy, "\n\n")
}

# Combine results
final_eval_table <- bind_rows(all_results)
final_eval_table


```

```{r}


```

```{r}


```

```{r}


```








```{r}


```

```{r}


```

```{r}


```

```{r}


```

```{r}


```







