)
# Print the counts
print(count_responses)
View(c_data)
library(dplyr)
# Attempt to select the columns
selected_data <- try(select(abcd_data, ksads_11_48_t, ksads_11_49_t), silent = TRUE)
# Check if selection was successful or if it returned an error
if (inherits(selected_data, "try-error")) {
print("One or both variables do not exist in the data frame.")
} else {
print("Both variables exist in the data frame.")
}
colnames8c_data
colnames(c_data)
library(dplyr)
# Attempt to select the columns
selected_data <- try(select(c_data, ksads_11_48_t, ksads_11_49_t), silent = TRUE)
# Check if selection was successful or if it returned an error
if (inherits(selected_data, "try-error")) {
print("One or both variables do not exist in the data frame.")
} else {
print("Both variables exist in the data frame.")
}
# Check if the columns exist in the data frame
variables_exist <- all(sapply(c("ksads_11_48_t", "ksads_11_49_t"), function(x) x %in% names(c_data)))
# Print result
if (variables_exist) {
print("Both variables exist in the data frame.")
} else {
print("One or both variables do not exist in the data frame.")
}
# Count the number of participants who responded with '1' for ksads_11_48_t and ksads_11_49_t
count_responses <- c_data %>%
summarize(
ksads_11_48_t_count = sum(ksads_11_48_t == 0, na.rm = TRUE),
ksads_11_49_t_count = sum(ksads_11_49_t == 0, na.rm = TRUE)
)
# Print the counts
print(count_responses)
# Count the number of NAs for ksads_11_48_t and ksads_11_49_t
count_na_responses <- c_data %>%
summarize(
ksads_11_48_t_na_count = sum(is.na(ksads_11_48_t)),
ksads_11_49_t_na_count = sum(is.na(ksads_11_49_t))
)
# Print the counts
print(count_na_responses)
# Count the number of non-NA responses for ksads_11_48_t and ksads_11_49_t
count_non_na_responses <- c_data %>%
summarize(
ksads_11_48_t_non_na_count = sum(!is.na(ksads_11_48_t)),
ksads_11_49_t_non_na_count = sum(!is.na(ksads_11_49_t))
)
# Print the counts
print(count_non_na_responses)
unique(c_datta$ksads_11_48_t)
unique(c_data$ksads_11_48_t)
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/t_pbm.csv")
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_t_bpm.csv")
print(summary(c_data))
unique(c_data$eventname)
#how many?
unique_count <- length(unique(c_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(c_data$eventname)
print(count_per_event)
# Replace blank strings with NA to maintain uniformity in missing values
c_data[c_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
c_data <- c_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
c_data_filtered <- c_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- c_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- c_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#how many?
unique_count <- length(unique(c_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(c_data$eventname)
print(count_per_event)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
p_data <- p_data %>%
select(src_subject_id, eventname, cbcl_q09_p, cbcl_q66_p,cbcl_q84_p, cbcl_q85_p, cbcl_q31_p, cbcl_q32_p, cbcl_q52_p, cbcl_q112_p)
p_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_p_cbcl.csv")
print(summary(p_data))
unique(p_data$eventname)
#how many?
unique_count <- length(unique(p_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(p_data$eventname)
print(count_per_event)
p_data <- p_data %>%
select(src_subject_id, eventname, cbcl_q09_p, cbcl_q66_p,cbcl_q84_p, cbcl_q85_p, cbcl_q31_p, cbcl_q32_p, cbcl_q52_p, cbcl_q112_p)
# Assuming p_data is your DataFrame, calculate the OCS score for each participant
p_data <- p_data %>%
mutate(ocs_score = cbcl_q09_p + cbcl_q31_p + cbcl_q32_p + cbcl_q52_p + cbcl_q66_p + cbcl_q84_p + cbcl_q85_p + cbcl_q112_p) %>%
select(src_subject_id, eventname, ocs_score)
# View the resulting DataFrame with the OCS scores
print(p_data)
# Assuming p_data is your DataFrame with the OCS score calculated
range_of_scores <- range(p_data$ocs_score)
# Print the range of the OCS scores
print(range_of_scores)
# Replace blank strings with NA to maintain uniformity in missing values
c_data[c_data == ""] <- NA
# Replace blank strings with NA to maintain uniformity in missing values
p_data[p_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
p_data <- p_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
p_data_filtered <- p_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- p_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- p_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#how many?
unique_count <- length(unique(p_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(p_data$eventname)
print(count_per_event)
View(p_data)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_y_bpm.csv")
print(summary(c_data))
unique(c_data$eventname)
#how many?
unique_count <- length(unique(c_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(c_data$eventname)
print(count_per_event)
c_data <- c_data %>%
select(src_subject_id, eventname, bpm_y_ss_internal_mean, bpm_y_ss_external_mean)
# Replace blank strings with NA to maintain uniformity in missing values
c_data[c_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
c_data <- c_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
c_data_filtered <- c_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- c_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- c_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_y_bpm.csv")
print(summary(c_data))
unique(c_data$eventname)
#how many?
unique_count <- length(unique(c_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(c_data$eventname)
print(count_per_event)
c_data <- c_data %>%
select(src_subject_id, eventname, bpm_y_ss_internal_mean, bpm_y_ss_external_mean)
# Replace blank strings with NA to maintain uniformity in missing values
c_data[c_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
c_data <- c_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
c_data_filtered <- c_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- c_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- c_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#how many?
unique_count <- length(unique(c_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(c_data$eventname)
print(count_per_event)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
write.csv(c_data, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/c_data.csv", row.names = FALSE)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
p_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_p_cbcl.csv")
print(summary(p_data))
unique(p_data$eventname)
#how many?
unique_count <- length(unique(p_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(p_data$eventname)
print(count_per_event)
p_data <- p_data %>%
select(src_subject_id, eventname, cbcl_q09_p, cbcl_q66_p,cbcl_q84_p, cbcl_q85_p, cbcl_q31_p, cbcl_q32_p, cbcl_q52_p, cbcl_q112_p)
# Assuming p_data is your DataFrame, calculate the OCS score for each participant
p_data <- p_data %>%
mutate(ocs_score = cbcl_q09_p + cbcl_q31_p + cbcl_q32_p + cbcl_q52_p + cbcl_q66_p + cbcl_q84_p + cbcl_q85_p + cbcl_q112_p) %>%
select(src_subject_id, eventname, ocs_score)
# View the resulting DataFrame with the OCS scores
print(p_data)
# Replace blank strings with NA to maintain uniformity in missing values
p_data[p_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
p_data <- p_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
p_data_filtered <- p_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- p_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- p_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
write.csv(p_data, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/p_data.csv", row.names = FALSE)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
t_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_t_bpm.csv")
print(summary(t_data))
unique(t_data$eventname)
#how many?
unique_count <- length(unique(t_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(t_data$eventname)
print(count_per_event)
t_data <- t_data %>%
select(src_subject_id, eventname, bpm_t_ss_internal_mean, bpm_t_ss_external_mean)
# Replace blank strings with NA to maintain uniformity in missing values
t_data[t_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
t_data <- t_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
t_data_filtered <- t_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- t_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- t_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
t_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/mental-health/mh_t_bpm.csv")
print(summary(t_data))
unique(t_data$eventname)
#how many?
unique_count <- length(unique(t_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(t_data$eventname)
print(count_per_event)
t_data <- t_data %>%
select(src_subject_id, eventname, bpm_t_ss_internal_mean, bpm_t_ss_external_mean)
# Replace blank strings with NA to maintain uniformity in missing values
t_data[t_data == ""] <- NA
# Define columns to exclude from the NA calculations
excluded_columns <- c("src_subject_id")
# Calculate the proportion of missing values per row, excluding specified columns
t_data <- t_data %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup()
# Filter out rows with more than 30% missing values
t_data_filtered <- t_data %>%
filter(missing_prop < 0.30) %>%
select(-missing_prop) # Remove the intermediate 'missing_prop' column
# Count number of unique 'src_subject_id' where none of the columns (excluding specified ones) are NA
count_all_non_missing <- t_data_filtered %>%
filter(across(-all_of(excluded_columns), ~ !is.na(.))) %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with no missing values
print(count_all_non_missing)
# Calculate the number of unique 'src_subject_id' with less than 30% missing values
count_less_than_30_missing <- t_data_filtered %>%
summarise(count = n_distinct(src_subject_id))
# Print the count for rows with less than 30% missing values
print(count_less_than_30_missing)
#how many?
unique_count <- length(unique(t_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
count_per_event <- table(t_data$eventname)
print(count_per_event)
write.csv(t_data, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/t_data.csv", row.names = FALSE)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(dplyr)
library(tidyr)
# Plotting
library(ggplot2)
# Utilities
library(knitr)
#write.csv(mri_ct, "/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/desikan_ct.csv", row.names = FALSE)
```
mri_ct <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_thk_dsk.csv")
#print(summary(mri_ct))
mri_v <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/imaging/mri_y_smr_vol_dsk.csv")
#print(summary(mri_v))
unique(mri_ct$eventname)
unique(mri_v$eventname)
#how many?
#cortical thickness
unique_count_ct <- length(unique(mri_ct$src_subject_id))
cat("Number of unique src_subject_id in mri_ct:", unique_count_ct, "\n")
count_per_event_ct <- table(mri_ct$eventname)
print(count_per_event_ct)
#volume
unique_count_v <- length(unique(mri_v$src_subject_id))
cat("Number of unique src_subject_id in mri_v:", unique_count_v, "\n")
count_per_event_v <- table(mri_v$eventname)
print(count_per_event_v)
# Calculate the proportion of missing data for each row across the symptoms_diagnosis columns
# Specify the columns to exclude from the missing calculation
excluded_columns <- c("eventname", "src_subject_id")
# Calculate the proportion of missing values excluding eventname and src_subject_id, then filter rows accordingly
mri_ct <- mri_ct %>%
rowwise() %>%
mutate(missing_prop = sum(is.na(across(-all_of(excluded_columns)))) / length(across(-all_of(excluded_columns)))) %>%
ungroup() %>%
filter(missing_prop < 0.30) %>%  # Keep rows with less than 30% missing values
select(-missing_prop)  # Remove the temporary missing_prop column
# Print the filtered data
print(mri_ct)
# Get the number of unique src_subject_id
unique_count <- length(unique(mri_ct$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
# Data manipulation
library(readr)
library(dplyr)
library(stringr)
# Plotting
library(ggplot2)
library(naniar)
library(tidyr)
library(gridExtra)
# Utilities
library(knitr)
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/c_data.csv")
p_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/p_data.csv")
t_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/t_data.csv")
c_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/c_data.csv")
p_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/p_data.csv")
t_data <- read.csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/OCD/t_data.csv")
demo <- read_csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/Mania/demo.csv")
latent <- read_csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/core/abcd-general/abcd_y_lf.csv")
# MRI year 2 follow up
desikan_v_2 <- read_csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/Mania/desikan_v_2.csv")
desikan_ct_2 <- read_csv("/Users/maggieheimvik/Desktop/LCBC/Data/ABCD/Mania/desikan_ct_2.csv")
full_data <- c_data %>%
left_join(p_data, by = c("src_subject_id", eventname)) #%>%
View(c_data)
View(p_data)
View(t_data)
full_data <- c_data %>%
left_join(p_data, by = c("src_subject_id", "eventname")) #%>%
# First, check how many unique "src_subject_id" there are
unique_count <- length(unique(full_data$src_subject_id))
cat("Number of unique src_subject_id:", unique_count, "\n")
# Count the number of unique src_subject_id with non-NA values for both c_sss and p_sss
count_unique_src_subject_id <- full_data %>%
filter(!is.na(c_sss) & !is.na(p_sss)) %>%
summarise(count = n_distinct(src_subject_id))
View(full_data)
View(full_data)
